<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Android on Vee's space</title><link>https://vee-zhang.github.io/tags/android/</link><description>Recent content in Android on Vee's space</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>vee.night@qq.com (Vee Zhang)</managingEditor><webMaster>vee.night@qq.com (Vee Zhang)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 10 Aug 2021 14:33:15 +0800</lastBuildDate><atom:link href="https://vee-zhang.github.io/tags/android/index.xml" rel="self" type="application/rss+xml"/><item><title>Android屏幕适配</title><link>https://vee-zhang.github.io/android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/</link><pubDate>Tue, 10 Aug 2021 14:33:15 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/</guid><description/></item><item><title>AMS</title><link>https://vee-zhang.github.io/ams/</link><pubDate>Mon, 09 Aug 2021 15:48:25 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/ams/</guid><description/></item><item><title>Crash监控</title><link>https://vee-zhang.github.io/crash%E7%9B%91%E6%8E%A7/</link><pubDate>Mon, 09 Aug 2021 10:17:20 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/crash%E7%9B%91%E6%8E%A7/</guid><description>&lt;p>Crash（应用崩溃）是由于代码异常而导致 App 非正常退出，导致应用程序无法继续使用，所有工作都停止的现象。发生 Crash 后需要重新启动应用（有些情况会自动重启），而且不管应用在开发阶段做得多么优秀，也无法避免 Crash 发生，特别是在 Android 系统中，系统碎片化严重、各 ROM 之间的差异，甚至系统Bug，都可能会导致Crash的发生。在 Android 应用中发生的 Crash 有两种类型，Java 层的 Crash 和 Native 层 Crash。这两种Crash 的监控和获取堆栈信息有所不同。&lt;/p></description></item><item><title>APK瘦身</title><link>https://vee-zhang.github.io/apk%E7%98%A6%E8%BA%AB/</link><pubDate>Mon, 09 Aug 2021 09:15:00 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/apk%E7%98%A6%E8%BA%AB/</guid><description/></item><item><title>网络优化</title><link>https://vee-zhang.github.io/%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/</link><pubDate>Fri, 06 Aug 2021 14:51:15 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96/</guid><description/></item><item><title>电量优化</title><link>https://vee-zhang.github.io/%E7%94%B5%E9%87%8F%E4%BC%98%E5%8C%96/</link><pubDate>Fri, 06 Aug 2021 09:46:55 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/%E7%94%B5%E9%87%8F%E4%BC%98%E5%8C%96/</guid><description/></item><item><title>ANR问题解决</title><link>https://vee-zhang.github.io/anr%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link><pubDate>Wed, 04 Aug 2021 13:39:14 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/anr%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</guid><description/></item><item><title>UI卡顿与布局优化</title><link>https://vee-zhang.github.io/ui%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/</link><pubDate>Wed, 04 Aug 2021 10:39:30 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/ui%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/</guid><description/></item><item><title>Android启动优化</title><link>https://vee-zhang.github.io/android%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/</link><pubDate>Tue, 03 Aug 2021 10:27:09 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/android%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/</guid><description/></item><item><title>OOM与内存优化</title><link>https://vee-zhang.github.io/oom%E4%B8%8E%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/</link><pubDate>Tue, 03 Aug 2021 10:16:07 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/oom%E4%B8%8E%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/</guid><description/></item><item><title>数据结构优化</title><link>https://vee-zhang.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 02 Aug 2021 16:06:41 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BC%98%E5%8C%96/</guid><description/></item><item><title>Android系统启动流程</title><link>https://vee-zhang.github.io/android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 28 Jul 2021 16:15:50 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description/></item><item><title>Android应用启动过程</title><link>https://vee-zhang.github.io/android%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</link><pubDate>Tue, 27 Jul 2021 14:46:26 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/android%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</guid><description/></item><item><title>Android系统架构</title><link>https://vee-zhang.github.io/android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</link><pubDate>Tue, 27 Jul 2021 13:51:13 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</guid><description/></item><item><title>Android页面绘制流程</title><link>https://vee-zhang.github.io/android%E9%A1%B5%E9%9D%A2%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 26 Jul 2021 16:06:05 +0800</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/android%E9%A1%B5%E9%9D%A2%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/</guid><description>Window Activity、Window、DecorView三者一一对应。 Window的分类 普通window，z轴范围1~99； 子window，z轴</description></item><item><title>Android布局原理与xml解析</title><link>https://vee-zhang.github.io/android%E5%B8%83%E5%B1%80%E5%8E%9F%E7%90%86%E4%B8%8Exml%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 12 Jul 2021 17:49:10 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/android%E5%B8%83%E5%B1%80%E5%8E%9F%E7%90%86%E4%B8%8Exml%E8%A7%A3%E6%9E%90/</guid><description/></item><item><title>Android自定义ViewGroup</title><link>https://vee-zhang.github.io/android%E8%87%AA%E5%AE%9A%E4%B9%89viewgroup/</link><pubDate>Mon, 12 Jul 2021 17:49:10 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/android%E8%87%AA%E5%AE%9A%E4%B9%89viewgroup/</guid><description>自定义ViewGroup与自定义View不同，一般不需要重写onDraw，而是需要重写onLayout。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description></item><item><title>Android应用启动流程</title><link>https://vee-zhang.github.io/android%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 21 Jun 2021 17:49:10 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/android%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>流程 点击桌面App图标，Launcher进程采用Binder IPC向system_server进程发起startActivity请求； sys</description></item><item><title>Apk打包和安装流程</title><link>https://vee-zhang.github.io/apk%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 21 Jun 2021 17:49:10 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/apk%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/</guid><description>.apk文件的组成 apk文件其实就是个压缩包，里面包含： classes.dex编译后的代码文件，安卓的可执行文件 resource.arsc 编译后的资源文件（raw）</description></item><item><title>Apk反编译流程</title><link>https://vee-zhang.github.io/%E5%8F%8D%E7%BC%96%E8%AF%91/</link><pubDate>Mon, 21 Jun 2021 17:49:10 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/%E5%8F%8D%E7%BC%96%E8%AF%91/</guid><description>.apk文件的组成 apk文件其实就是个压缩包，里面包含： classes.dex文件 resource 打包流程 aapt编译打包资源文件，生成R.java。 编译</description></item><item><title>对SpringGateway+Security+OAuth2.0的认识</title><link>https://vee-zhang.github.io/recyclerview%E8%A7%A3%E8%AF%BB/</link><pubDate>Mon, 10 May 2021 17:49:10 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/recyclerview%E8%A7%A3%E8%AF%BB/</guid><description>RV是什么 1 2 3 public class RecyclerView extends ViewGroup implements ScrollingView{ ... } 就是个ViewGroup，并且遵循了ScrollingView接口，所以支持滑动。 那么，既然是VG，那么我</description></item><item><title>SharedPreferences解读</title><link>https://vee-zhang.github.io/sharedpreferences%E8%A7%A3%E8%AF%BB/</link><pubDate>Fri, 30 Apr 2021 14:22:41 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/sharedpreferences%E8%A7%A3%E8%AF%BB/</guid><description>SharedPreferences解读 SharedPreferences是我们平时常用的简单储存工具。优点就是用起来方便，而且线程安全，甚至</description></item><item><title>Android内存泄露专题</title><link>https://vee-zhang.github.io/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B8%93%E9%A2%98/</link><pubDate>Wed, 24 Mar 2021 16:24:04 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%B8%93%E9%A2%98/</guid><description>原因 短生命周期对象持有长生命周期对象的强引用，造成短生命周期对象在不需要使用时不能被回收。 静态变量导致 1 2 3 4 5 6 7 8 9 10 11 12 13 public class MainActivity extends AppCompatActivity {</description></item><item><title>View的工作原理</title><link>https://vee-zhang.github.io/view%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 22 Mar 2021 10:37:36 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/view%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid><description>三大流程 measure 用来测量View的宽高； layout 用来确定View在父容器中的放置位置； draw 负责绘制。 在ActivityThread中，当Activity创</description></item><item><title>View事件体系</title><link>https://vee-zhang.github.io/view%E4%BA%8B%E4%BB%B6%E4%BD%93%E7%B3%BB/</link><pubDate>Mon, 22 Mar 2021 08:55:28 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/view%E4%BA%8B%E4%BB%B6%E4%BD%93%E7%B3%BB/</guid><description>位置参数 主要位置参数 View的位置主要由它的四个顶点(相对父容器)来决定： getLeft() getTop() getRight() getBottom() 用于移动的参数 x/y View左上角相对父容器的坐标； translationX/translationY View</description></item><item><title>AsyncTask解读</title><link>https://vee-zhang.github.io/asynctask%E8%A7%A3%E8%AF%BB/</link><pubDate>Wed, 17 Mar 2021 16:59:41 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/asynctask%E8%A7%A3%E8%AF%BB/</guid><description>使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 public class MainActivity extends</description></item><item><title>Parcelable解读</title><link>https://vee-zhang.github.io/parcelable%E8%A7%A3%E8%AF%BB/</link><pubDate>Fri, 12 Mar 2021 14:43:10 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/parcelable%E8%A7%A3%E8%AF%BB/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class Data implements Parcelable</description></item><item><title>Binder解析</title><link>https://vee-zhang.github.io/binder%E8%A7%A3%E6%9E%90/</link><pubDate>Fri, 12 Mar 2021 11:06:25 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/binder%E8%A7%A3%E6%9E%90/</guid><description>Binder是什么 进程间通讯机制 系统驱动 Binder.java跨进程能力 为何要多进程 申请更多内存 安全性隔离 Binder的优势 机制 性能 特点 安全</description></item><item><title>Android中Message的一辈子</title><link>https://vee-zhang.github.io/android%E4%B8%ADmessage%E7%9A%84%E4%B8%80%E8%BE%88%E5%AD%90/</link><pubDate>Tue, 09 Mar 2021 20:51:17 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/android%E4%B8%ADmessage%E7%9A%84%E4%B8%80%E8%BE%88%E5%AD%90/</guid><description>初始化 1 2 3 Looper.prepare(); Handler mHandler = new Handler(Looper.myLooper()); Looper.loop(); Looper.prepare()源码： 1 2 3 4 5 6 private static void prepare(boolean quitAllowed) { if (sThreadLocal.get() != null) { throw new RuntimeException(&amp;#34;Only one Looper may be created per thread&amp;#34;); } sThreadLocal.set(new Looper(quitAllowed)); } Looper的</description></item><item><title>MessageQueue解读</title><link>https://vee-zhang.github.io/messagequeue%E8%A7%A3%E8%AF%BB/</link><pubDate>Thu, 04 Mar 2021 20:01:35 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/messagequeue%E8%A7%A3%E8%AF%BB/</guid><description>回顾 handler发送消息： 1 2 3 4 5 6 7 8 9 10 private boolean enqueueMessage(@NonNull MessageQueue queue, @NonNull Message msg, long uptimeMillis) { msg.target = this; msg.workSourceUid = ThreadLocalWorkSource.getUid(); if (mAsynchronous) { msg.setAsynchronous(true); } return queue.enqueueMessage(msg, uptimeMillis);//最后调用的是</description></item><item><title>Message解读</title><link>https://vee-zhang.github.io/message%E8%A7%A3%E8%AF%BB/</link><pubDate>Wed, 03 Mar 2021 15:03:03 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/message%E8%A7%A3%E8%AF%BB/</guid><description>创建 我们都知道创建Message的时候有两种方式： 构造方法创建（不推荐）。 Message.obtain();（推荐）. 为了防止OOM，我们一</description></item><item><title>Looper解读</title><link>https://vee-zhang.github.io/looper%E8%A7%A3%E8%AF%BB/</link><pubDate>Tue, 02 Mar 2021 17:30:46 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/looper%E8%A7%A3%E8%AF%BB/</guid><description>类图 prepare 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public static void prepare() { prepare(true); } private static void prepare(boolean quitAllowed) { // 如果线程已经有了Looper就会报错 if (sThreadLocal.get() != null) { throw new RuntimeException(&amp;#34;Only one Looper may be created per thread&amp;#34;); }</description></item><item><title>Fragment在Activity中的生命周期</title><link>https://vee-zhang.github.io/fragment%E5%9C%A8activity%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link><pubDate>Fri, 26 Feb 2021 11:17:35 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/fragment%E5%9C%A8activity%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid><description>记忆方式 Fragment的onAttach,onCreate,onCreateView,onViewCreated在附加到Activity时</description></item><item><title>序列化</title><link>https://vee-zhang.github.io/%E5%BA%8F%E5%88%97%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>vee.night@qq.com (Vee Zhang)</author><guid>https://vee-zhang.github.io/%E5%BA%8F%E5%88%97%E5%8C%96/</guid><description>序列化：Object =&amp;gt; String 反序列化：String =&amp;gt; Object 核心原理 序列化是把对象转成字符串的过程，那么转换之后的字符串，就保存在文件中，所以Java</description></item></channel></rss>